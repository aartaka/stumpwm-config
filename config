(in-package :stumpwm)

;; Just in case Quicklisp won't be found. Gotta also make this install QL in case it needs to.
#-quicklisp
(let ((quicklisp-init
       (merge-pathnames "quicklisp/setup.lisp" (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

(defun at-home (path)
  (concat (namestring (user-homedir-pathname)) path))

(defun at-config (path)
  (concat (at-home ".config/stumpwm/") path))

;; Important asdf-loads
(init-load-path (at-home "git/stumpwm-contrib/"))
(ql:quickload
 '(:cl-ppcre :dexador :zpng :alexandria :serapeum :slynk :bordeaux-threads)) ; dependencies
(asdf:load-systems :screenshot :battery-portable :binwarp)            ; stumpwm-contribs

(defvar *slynk-port* 4012 "The port to start Slynk at. Change in case of collisions.")

(defun battery-accessible-p ()
  (not (member (battery-portable::battery-info-string)
               '("(not implemented)" "(no battery info)") :test #'equalp)))

(setf *max-last-message-size* 200
      *message-window-gravity* :center
      *message-window-input-gravity* :center
      *input-window-gravity* :center
      *timeout-wait* 2

      *startup-message* "Happy window hacking!"
      *default-bg-color* #x000000

      *mode-line-background-color* "black"
      *mode-line-foreground-color* "white"
      *mode-line-border-width* 0
      *mode-line-pad-y* 5
      *mode-line-pad-x* 10
      *window-format* "<%m%s %40t >"
      *screen-mode-line-format* (format nil "~@[~* %B ~][%d] %w" (battery-accessible-p))
      *colors* '("black" "red" "YellowGreen" "Khaki" "DeepSkyBlue" "IndianRed" "SkyBlue" "white")

      *mouse-focus-policy* :click

      *new-frame-action* :empty

      *show-command-backtrace* t

      *time-month-names* #("Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec")
      *time-day-names* #("Mon" "Tue" "Wed" "Thu" "Fri" "Sat" "Sun"))

(setf (xlib:window-background (xlib:screen-root (screen-number (current-screen))))
      #x8b3a3a)
(update-color-map (current-screen))
(enable-mode-line (current-screen) (current-head) t)

(defun generate-background-png (colors)
  (let ((pathname (at-home ".config/stumpwm/background.png"))
        (height (slot-value (current-head) 'stumpwm::height))
        (width (slot-value (current-head) 'stumpwm::width)))
    (with-open-file (file pathname :direction :output
                                   :if-does-not-exist :create
                                   :if-exists :supersede
                                   :element-type '(unsigned-byte 8))
      (let ((png (make-instance 'zpng:pixel-streamed-png
                                :height height :width width)))
        (loop initially (zpng:start-png png file)
              for row below height
              do (loop for col below width
                       do (zpng:write-pixel (alexandria:random-elt colors) png))
              finally (progn (zpng:finish-png png)
                             (return pathname)))))))

;; Command to start Slynk server.
(defcommand start-slynk () ()
  (slynk:create-server :port *slynk-port*
                       :dont-close t))

(defcommand timestamp-screenshot () ()
  (let ((file-name (format nil (at-home "Documents/screenshots/~X.png") (get-universal-time))))
    (screenshot:screenshot-window file-name)
    (message "Screenshot saved as ~a" file-name)))

(defcommand battery-info-message () ()
  (message (battery-portable::battery-info-string)))

(defvar *master-password* nil
  "The master password for the KeePassXC file.")

(defcommand copy-password () ()
  (let* ((password-file (at-home "Documents/p.kdbx"))
         (password (or *master-password*
                       (setf *master-password*
                             (read-one-line (current-screen) (concat password-file " password:")
                                            :password t))))
         (entries (with-input-from-string (st password)
                    (remove-if
                     (lambda (s) (uiop:string-suffix-p s "/"))
                     (uiop:split-string
                      (uiop:run-program (list "keepassxc-cli" "ls" password-file)
                                        :input st :output '(:string :stripped t))
                      :separator '(#\Newline)))))
         (entry (unless (equal entries '("NIL"))
                  (string-trim '(#\Space)
                               (read-one-line (current-screen) "entry: "
                                              :completions entries :require-match t)))))
    (unless (equal entry "NIL")
      (with-input-from-string (st password)
        (uiop:run-program (list "keepassxc-cli" "clip" password-file entry)
                          :input st)))))

(defvar *battery-thread*
  (when (battery-accessible-p)
    (bt:make-thread
     #'(lambda ()
         (let ((*message-window-gravity* :top-left))
           (loop :for time := (get-universal-time)
                 :when (= 0 (mod time 40))
                   :do (battery-info-message))))
     :name "Battery reporting"))
  "A small thread for battery state reporting. Made to get rid of modeline.")

(binwarp:define-binwarp-mode binwarp-mode
    "m" (:map *root-map* :redefine-bindings t)
  ((kbd "n") "binwarp down")
  ((kbd "p") "binwarp up")
  ((kbd "f") "binwarp right")
  ((kbd "b") "binwarp left")

  ((kbd "0") "init-binwarp")
  ((kbd "TAB") "back-binwarp")

  ((kbd "C-M-n") "ratrelwarp  0 +5")
  ((kbd "C-M-p") "ratrelwarp  0 -5")
  ((kbd "C-M-f") "ratrelwarp +5  0")
  ((kbd "C-M-b") "ratrelwarp -5  0")

  ((kbd "RET") "ratclick 1")
  ((kbd "SPC") "ratclick 3"))

(set-prefix-key (kbd "s-t"))

(dolist
    (binding `((,(kbd "s-r")   "iresize")
               (,(kbd "s-a")   "time")
               (,(kbd "s-B")   "battery-info-message")
               (,(kbd "s-b")   "banish")
               (,(kbd "s-:")   "eval")
               (,(kbd "s-;")   "colon")
               (,(kbd "s-!")   "exec")
               (,(kbd "s-h")   ,*help-map*)
               (,(kbd "s-g")   ,*groups-map*)
               (,(kbd "s-x")   ,*exchange-window-map*)
               (,(kbd "s-q")   "send-raw-key")
               (,(kbd "s-m")   "binwarp-mode")
               (,(kbd "s-s")   "timestamp-screenshot")
               (,(kbd "s-p")   "copy-password")
               (,(kbd "XF86AudioRaiseVolume") "exec pamixer --allow-boost -i 5")
               (,(kbd "XF86AudioLowerVolume") "exec pamixer -d 5")
               (,(kbd "XF86AudioMute") "exec bash ~/.config/stumpwm/mute.sh")
               (,(kbd "s-e")   ,(concat "exec emacsclient -cn -a '' "
                                        "-F '((font . \"IBM Plex Mono-17\") (vertical-scroll-bars) "
                                        "(tool-bar-lines) (menu-bar-lines))'"))
               (,(kbd "s-C-e") "exec emacs")
               (,(kbd "s-C-t") "exec st")
               (,(kbd "s-C-n") "exec nyxt")
               (,(kbd "s-C-f") "exec firefox")
               (,(kbd "s-C-i") "exec icecat")
               (,(kbd "s-C-u") "exec urxvt")
               (,(kbd "s-C-k") "exec keepassxc")
               (,(kbd "s-C-l") "exec libreoffice")
               (,(kbd "s-C-g") "exec gimp")
               (,(kbd "s-SPC") "pull-hidden-next")
               (,(kbd "s-M-p") "prev-in-frame")
               (,(kbd "s-M-n") "next-in-frame")
               (,(kbd "s-4")   "fullscreen")
               (,(kbd "s-3")   "hsplit")
               (,(kbd "s-2")   "vsplit")
               (,(kbd "s-1")   "only")
               (,(kbd "s-0")   "remove")
               (,(kbd "s-TAB") "fother")
               (,(kbd "s-w")   "windows")
               (,(kbd "s-l")   "redisplay")
               (,(kbd "s-+")   "balance-frames")
               (,(kbd "s-k")   "delete")
               (,(kbd "s-K")   "kill")
               (,(kbd "s-o")   "other")
               (,(kbd "s-i")   "info")
               (,(kbd "s-I")   "show-window-properties")
               (,(kbd "s-#")   "mark")
               (,(kbd "s-N")   "number")))
  (apply (alexandria:curry #'define-key *top-map*) binding))

;; This section is dependent on Vimium-FF
(define-remapped-keys
    `((,(lambda (win)
          (and (member (window-class win)
                       '("Firefox" "IceCat" "Nightly")
                       :test #'string-equal)
               (not binwarp:*binwarp-mode-p*)))
        ;; The native ones
        ("C-n" . "Down")
        ("C-p" . "Up")
        ("C-b" . "Left")
        ("C-f" . "Right")
        ("M-<" . "Home")
        ("M->" . "End")
        ("C-a" . "Home")
        ("C-e" . "End")
        ("C-d" . "Delete")
        ;; Less-obvious native ones
        ("M-." . "M-Right")  ; Forward in history
        ("M-," . "M-Left")   ; Back in history
        ("C-s" . "C-f")      ; Forward search
        ("C-g" . "ESC")      ; Cancel whatever
        ("C-d" . "C-k")      ; Focus search bar
        ("C-o" . "C-t")      ; New tab
        ("C-k" . "C-w")      ; Close current tab
        ("C-1" . "F11")      ; Fullscreen
        ;; The ones that I owe to Vimium
        ("C-?" . "?")        ; Vimium help screen
        ("M-l" . "F")        ; Open the link in the new tab
        ("C-l" . "f")        ; Open the link in this tab
        ;; Text-editing ones
        ("C-y" . "C-v")      ; Paste/yank
        ("C-w" . "C-x")      ; Cut/kill
        ("M-w" . "C-c")      ; Copy
        ("M-f" . "C-Right")  ; Jump one word forward
        ("M-b" . "C-Left")   ; Jump one word backward
        ("C-a" . "C-Up")     ; Jump to the beginning of the line
        ("C-e" . "C-Down")   ; Jump to the end of the line
        ("C-M-a" . "C-Home") ; Jump to the beginning of the text
        ("C-M-e" . "C-End")  ; Jump to the end of the text
        ("C-SPC" . "F7")     ; Caret mode. Can be handy for text selection.
        ;; Unbind the quirky original keybindings
        ("C-t" . "ESC")
        ("C-q" . "ESC"))))

;; Recommended by Guix Cookbook. Will revisit and test later.
;; (setf xft:*font-dirs* '("/run/current-system/profile/share/fonts/"))
;; (setf clx-truetype:+font-cache-filename+ (concat (getenv "HOME") "/.fonts/font-cache.sexp"))
;; (xft:cache-fonts)
;; (set-font (make-instance 'xft:font :family "Hack" :subfamily "Regular" :size 17))
