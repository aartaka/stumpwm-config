(in-package :stumpwm-user)

;; Just in case Quicklisp won't be found. Gotta also make this install QL in case it needs to.
#-quicklisp
(let ((quicklisp-init
       (merge-pathnames "quicklisp/setup.lisp" (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

(defun home (path)
  "Resolve the PATH against $HOME.
Not really useful, but saves some typing and makes all the HOME
resolution consistent."
  (namestring (uiop:merge-pathnames*
               (if (eql #\/ (elt path 0))
                   (subseq path 1)
                   path)
               (user-homedir-pathname))))

(defun config (path)
  "Resolve the PATH against StumpWM config dir.
Useful for dependency-based config files."
  (namestring (uiop:merge-pathnames*
               (if (eql #\/ (elt path 0))
                   (subseq path 1)
                   path)
               (home ".config/stumpwm/"))))

;; Important asdf-loads
(ql:quickload
 '(:cl-ppcre :zpng :alexandria :serapeum :bordeaux-threads)) ; dependencies

(setf *max-last-message-size* 200
      *message-window-gravity* :center
      *message-window-input-gravity* :center
      *input-window-gravity* :center
      *timeout-wait* 2

      *startup-message* "Happy window hacking!"
      *default-bg-color* #x000000

      ;;         0       1     2             3       4             5           6         7       8
      *colors* '("black" "red" "YellowGreen" "Khaki" "DeepSkyBlue" "IndianRed" "SkyBlue" "white" "gray")

      *mouse-focus-policy* :click

      *new-frame-action* :empty

      *show-command-backtrace* t

      *time-month-names* #("Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec")
      *time-day-names* #("Mon" "Tue" "Wed" "Thu" "Fri" "Sat" "Sun"))

(setf (xlib:window-background (xlib:screen-root (screen-number (current-screen))))
      #x8b3a3a)
(update-color-map (current-screen))

(defvar *master-password* nil
  "The master password for the KeePassXC file.")

(defun get-master-password (password-file)
  "Read master password for PASSWORD-FILE from StumpWM."
  (loop for password
          = *master-password*
            then (read-one-line (current-screen) (concat password-file " password: ") :password t)
        for attempt upto 3
        until (or
               (= attempt 3)
               (when password
                 (with-input-from-string (st password)
                   (ignore-errors
                    (uiop:run-program (list "keepassxc-cli" "ls" password-file)
                                      :input st :output '(:string :stripped t))))))
        finally (return (setf *master-password* password))))

(defun get-entry (password-file)
  "Choose the entry from PASSWORD-FILE to work (get username/password) on."
  (let* ((password (get-master-password password-file))
         (entries
           (unless (or (equal password '("NIL"))
                       (equal password nil))
             (with-input-from-string (st password)
               (remove-if
                (lambda (s) (uiop:string-suffix-p s "/"))
                (uiop:split-string
                 (uiop:run-program (list "keepassxc-cli" "ls" password-file)
                                   :input st :output '(:string :stripped t))
                 :separator '(#\Newline)))))))
    (unless (or (equal entries '("NIL"))
                (equal entries nil))
      (string-trim '(#\Space)
                   (read-one-line (current-screen) "entry: "
                                  :completions entries :require-match t)))))

(defcommand copy-password () ()
  "Copy the password for the given entity in password file."
  (let* ((password-file (home "/Documents/p.kdbx"))
         (password (get-master-password password-file))
         (entry (get-entry password-file)))
    (unless (or (equal entry '("NIL"))
                (equal entry nil))
      (with-input-from-string (st password)
        (uiop:launch-program (list "keepassxc-cli" "clip" password-file entry)
                             :input st)))))

(defcommand copy-username () ()
  "Copy the username for the given entity in password file."
  (let* ((password-file (home "/Documents/p.kdbx"))
         (password (get-master-password password-file))
         (entry (get-entry password-file)))
    (unless (or (equal entry '("NIL"))
                (equal entry nil))
      (with-input-from-string (st password)
        (uiop:launch-program
         (list "keepassxc-cli" "clip" "--attribute" "username"
               password-file entry)
         :input st)))))

(set-prefix-key (kbd "s-t"))

(defcommand sudo (command password) ((:string "sudo bash -c ") (:password "Sudo password: "))
  "Run the COMMAND as sudo, prompting for PASSWORD."
  (with-input-from-string (s password)
    (uiop:launch-program `("sudo" "-S" "--" "bash" "-c" ,command) :input s)))

(defvar emacsclient
  (concat "exec emacsclient -cn -a '' "
          "-F '((font . \"IBM Plex Mono-17\") (vertical-scroll-bars) "
          "(tool-bar-lines) (menu-bar-lines))'"))

(defcommand doom () ()
  (uiop:launch-program (list "chocolate-doom" "-iwad" (home "/Documents/doom/GAME/DOOMU.WAD"))))
(defcommand doom2 () ()
  (uiop:launch-program (list "chocolate-doom" "-iwad" (home "/Documents/doom2/DOOM2.WAD"))))
(defcommand doom-plutonia () ()
  (uiop:launch-program (list "chocolate-doom" "-iwad" (home "/Documents/doom-plutonia/PLUTONIA.WAD"))))
(defcommand quake () ()
  (uiop:launch-program (list "ioquake3.x86_64" "-height" "1200" "-width" "1600" "-condebug" "-mode" "4")))

(defun run-pamixer-get-string (command)
  "Helper to abstract away pamixer commands and get percentage from them."
  (string-trim serapeum:whitespace (run-shell-command command t)))

(defcommand increase-volume () ()
  "Increase device volume and show the percentage."
  (message "Volume at ~a%" (run-pamixer-get-string "pamixer --allow-boost -i 5 --get-volume")))

(defcommand decrease-volume () ()
  "Decrease device volume and show the percentage."
  (message "Volume at ~d%" (run-pamixer-get-string "pamixer -d 5 --get-volume")))

(defcommand toggle-mute () ()
  "Mute or unmute the device."
  (if (equal "true" (run-pamixer-get-string "pamixer -t --get-mute"))
      (message "Muted!")
      (message "Unmuted!")))

(dolist
    (binding `((,(kbd "s-r")   "iresize")
               (,(kbd "s-a")   "time")
               (,(kbd "s-b")   "banish")
               (,(kbd "s-:")   "eval")
               (,(kbd "s-;")   "colon")
               (,(kbd "s-!")   "exec")
               (,(kbd "s-h")   ,*help-map*)
               (,(kbd "s-g")   ,*groups-map*)
               (,(kbd "s-q")   "send-raw-key")
               (,(kbd "s-p")   "copy-password")
               (,(kbd "s-u")   "copy-username")
               (,(kbd "s-F3")  "increase-volume")
               (,(kbd "s-F2")  "decrease-volume")
               (,(kbd "s-F1")  "toggle-mute")
               (,(kbd "s-e")   ,emacsclient)
               (,(kbd "s-C-e") "exec emacs")
               (,(kbd "s-C-t") "exec st")
               (,(kbd "s-C-n") "exec nyxt -v")
               (,(kbd "s-C-u") "exec urxvt")
               (,(kbd "s-C-k") "exec keepassxc")
               (,(kbd "s-C-l") "exec libreoffice")
               (,(kbd "s-C-g") "exec gimp")
               (,(kbd "s-SPC") "pull-hidden-next")
               (,(kbd "s-M-p") "prev-in-frame")
               (,(kbd "s-M-n") "next-in-frame")
               (,(kbd "s-4")   "fullscreen")
               (,(kbd "s-3")   "hsplit")
               (,(kbd "s-2")   "vsplit")
               (,(kbd "s-1")   "only")
               (,(kbd "s-0")   "remove")
               (,(kbd "s-TAB") "fother")
               (,(kbd "s-w")   "windows")
               (,(kbd "s-l")   "redisplay")
               (,(kbd "s-+")   "balance-frames")
               (,(kbd "s-k")   "delete")
               (,(kbd "s-K")   "kill")
               (,(kbd "s-o")   "other")
               (,(kbd "s-i")   "info")
               (,(kbd "s-I")   "show-window-properties")
               (,(kbd "s-#")   "mark")
               (,(kbd "s-N")   "number")
               (,(kbd "s-RET")   "ratclick 1")))
  (apply (alexandria:curry #'define-key *top-map*) binding))

(defvar *screen-refresh-thread* nil
  "The thread to constantly move mouse a little to cause the screen stay on.")

(define-interactive-keymap screen-lock-less-mode
    (:on-enter (lambda ()
                 (setf *screen-refresh-thread*
                       (bt:make-thread (lambda ()
                                         (loop (ratrelwarp (1- (random 3)) (1- (random 3)))
                                               (sleep 550))))))
     :on-exit (lambda ()
                (bt:destroy-thread *screen-refresh-thread*)
                (setf *screen-refresh-thread* nil))))

;; Recommended by Guix Cookbook. Will revisit and test later.
;; (setf xft:*font-dirs* '("/run/current-system/profile/share/fonts/"))
;; (setf clx-truetype:+font-cache-filename+ (concat (getenv "HOME") "/.fonts/font-cache.sexp"))
;; (xft:cache-fonts)
;; (set-font (make-instance 'xft:font :family "Hack" :subfamily "Regular" :size 17))

(setf (uiop:getenv "MOZ_USE_XINPUT2") "1")

(bt:make-thread
 (lambda ()
   (uiop:launch-program "offlineimap")))

(init-load-path (home "/git/stumpwm-contrib/"))

(defmacro load-after-system (system &optional file)
  "A simplistic copy of Nyxt's macro of the same name."
  ;; On Guix, all the SBCL FASLs are put into read-only directories,
  ;; causing compilation errors. Using `asdf:load-source-op' helps that,
  ;; as loading from source does not cause re-compilation.
  `(when (ignore-errors (asdf:oos 'asdf:load-source-op ,system))
     ,(when file
        `(load ,file))))

(load-after-system :binwarp (config "binwarp.lisp"))

;; This section is dependent on Vimium-FF and Binwarp.
(define-remapped-keys
  `((,(lambda (win)
        (and (some (lambda (class)
                     (search class (window-class win) :test #'equalp))
                   '("firefox" "icecat" "nightly" "chromium"))
             (not (ignore-errors (symbol-value (read-from-string "binwarp:*binwarp-mode-p*"))))))
     ;; The native ones
     ("C-n" . "Down")
     ("C-p" . "Up")
     ("C-b" . "Left")
     ("C-f" . "Right")
     ("C-v" . "SunPageDown")
     ("M-v" . "SunPageUp")
     ("M-<" . "Home")
     ("M->" . "End")
     ("C-a" . "Home")
     ("C-e" . "End")
     ("C-d" . "Delete")
     ;; Less-obvious native ones
     ("M-." . "M-Right")  ; Forward in history
     ("M-," . "M-Left")   ; Back in history
     ("C-s" . "C-f")      ; Forward search
     ("C-d" . "C-k")      ; Focus search bar
     ("C-o" . "C-t")      ; New tab
     ("C-k" . "C-w")      ; Close current tab
     ("C-1" . "F11")      ; Fullscreen
     ;; The ones that I owe to Vimium
     ("C-?" . "?")        ; Vimium help screen
     ("M-l" . "F")        ; Open the link in the new tab
     ("C-l" . "f")        ; Open the link in this tab
     ;; Text-editing ones
     ("C-y" . "C-v")      ; Paste/yank
     ("C-w" . "C-x")      ; Cut/kill
     ("M-w" . "C-c")      ; Copy
     ("M-f" . "C-Right")  ; Jump one word forward
     ("M-b" . "C-Left")   ; Jump one word backward
     ("C-a" . "C-Up")     ; Jump to the beginning of the line
     ("C-e" . "C-Down")   ; Jump to the end of the line
     ("C-M-a" . "C-Home") ; Jump to the beginning of the text
     ("C-M-e" . "C-End")  ; Jump to the end of the text
     ("C-SPC" . "F7")     ; Caret mode. Can be handy for text selection.
     ;; Unbind the quirky original keybindings
     ("C-t" . "ESC")
     ("C-q" . "ESC"))))

(load-after-system :mem (config "mem.lisp"))
(load-after-system :battery-portable (config "battery.lisp"))
(load-after-system :slynk (config "slynk.lisp"))
(load-after-system :screenshot (config "screenshot.lisp"))

(load-after-system :swm-golden-ratio)
(swm-golden-ratio:toggle-golden-ratio)

;; TODO: Configure it.
(load-after-system :stump-backlight)
